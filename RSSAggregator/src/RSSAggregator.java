import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Charles Zhang
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page
     * title</title> </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        int titleElement = getChildElement(channel, "title"); //element index of title
        int linkElement = getChildElement(channel, "link"); //element index of link
        out.println("<html> <head> <title> "
                + channel.child(titleElement).child(0).label()
                + "</title> </head>");
        out.println("<body> <h1> <a href = \""
                + channel.child(linkElement).child(0).label() + "\">"
                + channel.child(titleElement).child(0).label() + "</a> </h1>"); //header title
        out.println("<table border = \"1\">"); //constructs table and header of each column
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        int i = 0;
        while (i < channel.numberOfChildren()) { //goes through all children of channel and sorts through children labeled item
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), out);
            }
            i++;
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) { //closes all HTML tags
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table> </body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures
     *
     *          <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     *          </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int numberElement = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) { //goes through all children and finds the one with the same tag
            if (xml.child(i).label().equals(tag)) {
                numberElement = i;
            }
        }
        return numberElement;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     *
     *           <pre>
     * [the label of the root of item is an <item> tag] and out.is_open
     *           </pre>
     *
     * @ensures
     *
     *          <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     *          </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<tr>");
        int linkElement = getChildElement(item, "link"); //element index of link
        if (getChildElement(item, "pubDate") >= 0) { //if there is a date
            out.println("<td>" + item.child(getChildElement(item, "pubDate"))
                    .child(0).label() + "</td>");
        } else {
            out.println("<td> No date available </td>");
        }
        if (getChildElement(item, "source") >= 0) { //ensures there is a source
            out.println("<td><a href = \""
                    + item.child(getChildElement(item, "source"))
                            .attributeValue("url")
                    + "\">" + item.child(getChildElement(item, "source"))
                            .child(0).label()
                    + "</a> </td>"); //prints source with the link
        } else {
            out.println("<td> No source available </td>");
        }
        if (getChildElement(item, "title") >= 0) { //ensures there is a title
            if (linkElement >= 0) {
                out.println("<td><a href = \""
                        + item.child(linkElement).child(0).label() + "\">"
                        + item.child(getChildElement(item, "title")).child(0)
                                .label()
                        + "</a> </td>"); //prints title with its link
            } else {
                out.println("<td>" + item.child(getChildElement(item, "title"))
                        .child(0).label() + "</td>");
            }
        } else {
            out.println("<td><a href = \""
                    + item.child(linkElement).child(0).label() + "\">"
                    + "No title available </a> </td>"); //if there's no title, it still links it
        }
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures
     *
     *          <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     *          </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        SimpleWriter fOut = new SimpleWriter1L(file); //creates new file
        XMLTree xml = new XMLTree1(url).child(0);
        outputHeader(xml, fOut); //executes the outputHeader method
        outputFooter(fOut); //closes the HTML tags
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        out.println("Please input the name of your XML file:");
        String xmlName = in.nextLine();
        out.println("Please input the name/url of the HTML output file:");
        String outputName = in.nextLine();
        XMLTree xml = new XMLTree1(xmlName); //creates XML file with url
        SimpleWriter jOut = new SimpleWriter1L(outputName);
        jOut.println("<html>");
        jOut.println("<head> <title> " + xml.attributeValue("title")
                + "</title> </head>");
        jOut.println("<body>");
        jOut.println("<h2>" + xml.attributeValue("title") + "</h2>");
        jOut.println("<u1>");
        int i = 0;
        while (i < xml.numberOfChildren()) { //goes through all children of xml root
            processFeed(xml.child(i).attributeValue("url"),
                    xml.child(i).attributeValue("file"), out);
            jOut.println("<li> <a href = \""
                    + xml.child(i).attributeValue("file") + "\">"
                    + xml.child(i).attributeValue("name") + "</a> </li>");
            i++;
        }
        jOut.println("</u1> </body> </html>"); //closes HTML tags
        jOut.close();
        in.close();
        out.close();
    }

}